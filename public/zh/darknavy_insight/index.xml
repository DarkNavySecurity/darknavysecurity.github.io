<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>深蓝洞察 on DARKNAVY</title>
    <link>https://www.darknavy.org/zh/darknavy_insight/</link>
    <description>Recent content in 深蓝洞察 on DARKNAVY</description>
    <image>
      <title>DARKNAVY</title>
      <url>https://www.darknavy.org/images/white_logo.png</url>
      <link>https://www.darknavy.org/images/white_logo.png</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 11 Feb 2025 11:41:45 +0800</lastBuildDate>
    <atom:link href="https://www.darknavy.org/zh/darknavy_insight/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024年度最狂躁不安的漏洞</title>
      <link>https://www.darknavy.org/zh/darknavy_insight/the_maddest_vulnerability_of_2024/</link>
      <pubDate>Tue, 11 Feb 2025 11:41:45 +0800</pubDate>
      <guid>https://www.darknavy.org/zh/darknavy_insight/the_maddest_vulnerability_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_maddest_vulnerability_of_2024/attachments/8d7f8b1c-b32a-4943-9b1d-fcdcf71c6a1e.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;在安全研究人员的共同努力下，越发严格的安全缓解措施，已经把大部分内存漏洞扼杀在了摇篮之中。&lt;/p&gt;
&lt;p&gt;是时候宣布内存漏洞成为过去式了？&lt;/p&gt;
&lt;p&gt;2024年7月，一枚来自Windows阵营的&amp;quot;核弹&amp;quot;打破了安全的幻象。我们不禁发问：面对来自内存的威胁，眼前的城墙究竟能抵挡些什么？&lt;/p&gt;
&lt;p&gt;以下为本期《深蓝洞察 | 2024 年度安全报告》的第四篇。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_maddest_vulnerability_of_2024/attachments/970c2c86-bd62-4753-9cbc-87c8c0a5af7f.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;2024年5月，Lewis Lee、Chunyang Han和Zhiniang Peng向微软报告了一个存在于Windows Server RDL (Remote Desktop Licensing)服务中的漏洞。7月，该漏洞被修复并出现在公众视野。&lt;/p&gt;
&lt;p&gt;一石激起千重浪，作为一个&lt;strong&gt;无需认证、无需用户交互&lt;/strong&gt;即可触发&lt;strong&gt;远程代码执行&lt;/strong&gt;的内存破坏漏洞，它一经出现便迅速激起各大安全厂商与从业者的高度关注，一度被称作&amp;quot;&lt;strong&gt;核弹级漏洞&amp;quot;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就是本篇的主角——&lt;strong&gt;狂躁许可（MadLicense）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尽管该漏洞起初被认为是比肩&amp;quot;永恒之蓝&amp;quot;的存在，经调研发现，它的影响范围实际上相对有限。该漏洞存在于Windows Server上的RDL服务而非通常认为的RDP协议。该服务仅作为一个可选安装项，用于允许多个用户通过RDP连接到服务器，&lt;strong&gt;与大部分个人用户关系不大&lt;/strong&gt;。此外该漏洞存在于用户态，单个漏洞对系统的威胁能力较为有限。&lt;/p&gt;
&lt;p&gt;漏洞的成因是远程未授权用户能通过RPC远程调用RDL服务中的&lt;code&gt;TLSRpcTelephoneRegisterLKP&lt;/code&gt;函数。该函数的子函数中对用户的部分输入进行base24到base10的解码，该功能并没有对输入长度进行限制，导致了一个&lt;strong&gt;无长度限制的堆溢出漏洞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作为一个内存破坏漏洞，它的破坏力不容小觑。于是我们立即着手进行复现，并试图探究，在&lt;strong&gt;内存漏洞式微、安全缓解措施愈发严格&lt;/strong&gt;的今天，要在最新Windows平台利用这样一个经典的堆溢出漏洞，会遇到哪些阻碍和挑战？&lt;/p&gt;
&lt;p&gt;&lt;video src=&#34;attachments/617e65a7-5214-477b-8e75-72b67899a97f.mp4&#34; controls=&#34;controls&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;复现结果如图。攻击机（右侧）运行恶意脚本，在受害者主机未进行任何操作的情况下，可稳定地拿下远程主机的控制权（左侧shell）。&lt;/p&gt;
&lt;p&gt;自Windows 10引入的&lt;strong&gt;segment heap&lt;/strong&gt;堆实现机制，被广泛应用在系统进程中。对于常用尺寸内存的分配，使用VS(Variable Size)或LFH(Low Fragmentation Heap)分配器实现。&lt;/p&gt;
 &lt;img src=&#34;attachments/4269c94f-503f-4b61-9e69-2ad0390aac70.webp&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 30%;&#34;/&gt;
&lt;p&gt;VS分配器对于溢出的防护机制较为完善。对于每个堆块，块首中的重要信息均被加密；空闲堆块间的连接也由安全性更高的数据结构代替。这些保护机制使得漏洞利用需要一定程度的信息泄露，大大提升了攻击门槛。&lt;/p&gt;
&lt;p&gt;然而当某一尺寸达到一定分配次数时，堆块分配会转为使用效率更高的LFH进行实现。&lt;/p&gt;
&lt;p&gt;相较VS，LFH的防护机制相对宽松。LFH堆块不存在块首，因此可以毫无阻碍地溢出到相邻堆块。为了缓解这一利用，LFH的分配采用了完全的随机化：堆块布局随机，且重用最近释放的堆块也不再可靠。这一点可以通过堆喷射的技巧进行绕过。&lt;/p&gt;
&lt;p&gt;在狂躁许可漏洞造成的无限制堆溢出面前，segment heap的防御机制被轻易击穿了。我们依然可以轻易溢出到目标堆块，伪造对象以获取&lt;strong&gt;任意地址读写/任意地址调用&lt;/strong&gt;的原语。&lt;/p&gt;
&lt;p&gt;到这里利用还没有结束。接下来面对的通用内存缓解措施表现会如何？&lt;/p&gt;
&lt;p&gt;微软在Windows 8.1 Update 3和Windows 10中引入了一项重量级的缓解措施——&lt;strong&gt;控制流保护（CFG）&lt;/strong&gt;。在启用CFG后，间接调用会使用编译期间生成的位图进行验证，确保仅对进程中加载模块的函数入口处进行调用，从而有效阻断了传统的代码片段重用攻击。&lt;/p&gt;
&lt;p&gt;另一个在Windows 10被引入的缓解措施是&lt;strong&gt;任意代码防护（ACG）&lt;/strong&gt;。ACG可防止现有代码被修改，同时阻止了动态分配可执行内存。ACG与CFG同时开启的情况下，同时绕过这两大防护变得格外困难，几乎杜绝了传统的写入执行shellcode的可能性。&lt;/p&gt;
&lt;p&gt;需要注意的是，这两个机制并不能防止攻击者调用&lt;code&gt;CreateProcessA&lt;/code&gt;等可能被滥用的函数。在不绕过以上内存缓解措施的情况下，任意函数调用已经足够允许我们在目标机上执行任意命令。&lt;/p&gt;
&lt;p&gt;而漏洞原作者之一，华中科技大学副教授彭峙酿向我们透露，他们能够&lt;strong&gt;近100%稳定利用、执行任意shellcode&lt;/strong&gt;。这意味着以上内存缓解措施依然存在被绕过的可能。&lt;/p&gt;
&lt;p&gt;为何在采用最新缓解措施的Windows Server 2025上，此内存漏洞依然能被完整利用？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;彭峙酿这样回答&lt;/strong&gt;：目前在Windows众多最新缓解措施全开的情况下，由一个内存破坏漏洞实现远程利用，正常来说是极难的。很多漏洞已不存在被利用的路径，或路径极少极隐蔽。&lt;/p&gt;
&lt;p&gt;但这并不代表目前的缓解措施杀死了所有的漏洞利用。能否完成利用往往取决于：攻击者为了完成利用所愿意投入的时间、对相关代码模块的熟悉程度、漏洞和具体模块的特殊情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;deepseek锐评&#34;&gt;DeepSeek锐评&lt;/h2&gt;
&lt;p&gt;微软对狂躁许可漏洞&amp;quot;几乎不可能利用&amp;quot;的傲慢断言，折射出安全行业长期存在的评估悖论：当漏洞评级体系脱离攻击者视角，便沦为自欺欺人的技术乌托邦。&lt;/p&gt;
&lt;p&gt;防御者用静态指标丈量动态攻防，用理论模型否定实战可能，恰是安全防御最大的盲区。此次漏洞利用链突破多重内存防护的实践证明，安全评估不应是厂商的&amp;quot;免责声明&amp;quot;，而应成为攻防对抗的动态标尺。若不能正视攻击者&amp;quot;技术暴力&amp;quot;的突破能力，再完美的缓解措施都将沦为数字时代的马奇诺防线。&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    <item>
      <title>2024年度最具想象空间的新应用</title>
      <link>https://www.darknavy.org/zh/darknavy_insight/the_most_imaginative_new_applications_of_2024/</link>
      <pubDate>Mon, 10 Feb 2025 11:25:50 +0800</pubDate>
      <guid>https://www.darknavy.org/zh/darknavy_insight/the_most_imaginative_new_applications_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_imaginative_new_applications_of_2024/attachments/1ad18afd-362e-414f-a907-3b86a212e397.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2023年是生成式AI和大型语言模型的元年，它们以前所未有的方式输出内容。&lt;/p&gt;
&lt;p&gt;2024年，涌现出大量的AI智能体（AI Agent）不仅扩展了大模型的能力边界，还驱动了更广泛的工具使用，并将其应用场景拓展到更多领域。&lt;/p&gt;
&lt;p&gt;对于安全研究者而言，如何借助AI力量的提高工作效率，甚至驱动AI像人类一样思考、分析、挖掘漏洞，已成为一个关键话题。&lt;/p&gt;
&lt;p&gt;是率先拥抱AI，还是被AI取代，这一天何时会到来？&lt;/p&gt;
&lt;p&gt;以下为本期《深蓝洞察 | 2024 年度安全报告》的第三篇。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_imaginative_new_applications_of_2024/attachments/1a724053-1a90-48e6-81c5-5d26174869b8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;随着生成式AI的出现，其展现出的惊人代码理解能力，无疑表现出其可能颠覆安全研究领域的潜力。&lt;/p&gt;
&lt;p&gt;23年以来，安全研究人员们便开始尝试利用大模型的知识库及内容生成能力提高安全研究各个阶段的效率：&lt;/p&gt;
&lt;p&gt;向大模型提问能够帮助安全研究员快速理解代码的功能、使用大模型快速生成测试代码、将大模型集成至IDE中并提供编码安全建议…&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;DARKNAVY借助大模型辅助分析发现的Chrome AI模块高危漏洞&#34; loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_imaginative_new_applications_of_2024/attachments/6c082f7c-8610-41b4-b74b-dbecf585084c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样也有一系列基于大模型的工具应运而生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将大模型作为安全研究知识库可以有效提高面对不熟悉领域问题时的解决效率。云起无垠通过使用大量网络安全数据集训练了SecGPT网络安全大模型，作为专家系统帮助研究人员为各种网络安全任务提供建议。&lt;/li&gt;
&lt;li&gt;在渗透测试领域，南洋理工大学邓格雷将大模型应用于Web渗透测试领域，设计了PentestGPT，针对渗透过程中的目标扫描、漏洞利用等流程提供帮助；BurpGPT通过使用大模型对网络流量进行分析，识别传统扫描器可能遗漏的漏洞。&lt;/li&gt;
&lt;li&gt;在逆向分析方面，Gepetto作为逆向分析工具IDA Pro的插件，通过接入大模型对反编译代码进行语义理解。&lt;/li&gt;
&lt;li&gt;软件安全研究基础设施方面，清华大学副教授张超团队使用机器指令语料库训练的机器语言大模型（MLM），不仅能够比传统反编译方案能够获得包含程序语义、更直观易懂的反编译代码，还能够进一步通过MLM辅助解决漏洞挖掘、软件相似性分析等软件安全领域问题。&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
 &lt;img src=&#34;attachments/1e3b25d2-3f4f-4939-9201-82f133147496.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;这些工具毫无疑问推动了安全研究中各阶段的效率，但在安全研究者们最期望解决的&lt;strong&gt;未知漏洞自动化挖掘与修复方面&lt;/strong&gt;，结合DARKNAVY的安全研究经验，当前的大模型仍面临诸多挑战。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一方面，大模型的上下文窗口限制了其对程序的理解范围。ChatGPT-4o的上下文窗口为128k tokens，而现实世界的程序代码通常代码量较大、漏洞常常跨越多个文件，可能出现超长的上下文。尽管有支持上千万tokens上下文窗口的大模型出现，但处理超长上下文时，模型可能会分散注意力甚至遗忘部分内容，定位特定的代码片段犹如大海捞针。&lt;/li&gt;
&lt;li&gt;另一方面，大模型难以进行较精密的计算且容易产生幻觉。安全漏洞时常伴随着苛刻的触发条件，而目前的大模型难以进行精确的状态推理和数学计算，从而对程序状态可能做出误判，导致误报。而静态代码的复杂性及状态不确定性，使得大模型难以通过简单推理验证漏洞的真实性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2024年，为了推动大模型在自动化漏洞挖掘领域的能力边界，AIxCC参赛团队、Google等都在尝试通过AI Agent的方式，结合传统漏洞分析方法、为大模型添加更多的工具、指导大模型参考人类研究方式开展自治化程度更高的漏洞分析工作。&lt;/p&gt;
&lt;h2 id=&#34;naptime&#34;&gt;Naptime&lt;/h2&gt;
&lt;p&gt;Google的&amp;quot;Naptime&amp;quot;项目通过AI Agent（智能体）的方式，为其提供了一系列人类研究员常用的工具，使Agent模仿人类研究员的思维及行为方式，通过不断地迭代分析漏洞、假设驱动的研究方式，自主选择并使用工具获取更准确的信息，从而提升了Agent发现漏洞的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码浏览器&lt;/strong&gt;：Agent可以使用代码浏览器像人类一样阅读代码仓库中特定片段的代码，从而保证&amp;quot;Naptime&amp;quot;在处理大型代码库时，能够更加&amp;quot;专心&amp;quot;地分析特定的函数或变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试器&lt;/strong&gt;：能够帮助Agent获取程序运行时的信息，Agent可以在调试器中设置断点并观察程序在不同输入数据下的行为，从而实现动态分析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python工具&lt;/strong&gt;：Agent能够运行Python脚本对程序的中间状态进行精确的计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此一来，Naptime便能模仿人的研究方式，浏览代码仓库中感兴趣的代码，并根据函数调用关系进行分析，实现全自动化的漏洞挖掘流程。&lt;/p&gt;
 &lt;img src=&#34;attachments/b9629094-fbd8-45b3-9fbf-704580415126.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;终于，在24年10月，Naptime的进化版Big Sleep在SQLite中发现了一个潜在可利用的0day漏洞。&lt;/p&gt;
&lt;p&gt;Big Sleep在浏览代码时，对漏洞函数中的断言（assertion）产生了兴趣，如同人类研究员一般，开始分析触发该断言的可能性并推断触发条件。随后Big Sleep尝试将输入iCol设为-1，并利用调试器进行测试，成功触发断言导致crash。&lt;/p&gt;
 &lt;img src=&#34;attachments/f518e7d3-8f09-49fc-8836-d8cccb3060af.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;尽管这个漏洞在调试环境中会触发断言，但Google研究人员发现在release版本中，并不会包含该断言，从而导致该漏洞具备了可利用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google使Agent按照人类的思考方式阅读代码、测试输入，成功利用大模型的代码理解能力实现自动化代码安全性分析，并避免了大模型幻觉导致的误报。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;aixcc&#34;&gt;AIxCC&lt;/h2&gt;
&lt;p&gt;同样是SQLite3，早在2024年8月，AIxCC主办方报告了Team Atlanta发现的一个off-by-one导致空指针解引用漏洞。&lt;/p&gt;
 &lt;img src=&#34;attachments/002a0b60-7f96-4067-833b-7b6bbb181bd5.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 50%;&#34;/&gt;
&lt;p&gt;&lt;strong&gt;为什么 Team Atlanta 没有自己报告漏洞呢？&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024年最具含“金”量的绕过</title>
      <link>https://www.darknavy.org/zh/darknavy_insight/the_most_golden_bypass_of_2024/</link>
      <pubDate>Sun, 09 Feb 2025 17:13:30 +0800</pubDate>
      <guid>https://www.darknavy.org/zh/darknavy_insight/the_most_golden_bypass_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_golden_bypass_of_2024/attachments/a9bb1fb8b45e13bebaef9cd37af06097.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;基于浏览器漏洞的攻击，自2000年代初出现以来直至今日，一直是一种主流、有效且场景丰富的攻击手段。以下为本期《深蓝洞察 | 2024 年度安全报告》的第二篇。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_golden_bypass_of_2024/attachments/640.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据市场调查机构 Statcounter 公布的最新报告，Chrome浏览器无可争议地牢牢占据了市场占有率第一的宝座。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_golden_bypass_of_2024/attachments/085f2c36-5c81-4182-b887-93394febe001.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Chrome以其卓越的安全性而著称，Google安全团队一直致力于研究应用最前沿的漏洞缓解机制。MiraclePtr就是其中最为知名的缓解机制之一，旨在防止浏览器中的UAF漏洞被攻击者利用。&lt;/p&gt;
&lt;p&gt;Chrome中的PartitionAlloc堆分配器在分配和释放对象时维护了一个用户无感知的refcount字段，简单概括MiraclePtr这一缓解机制就是：若对象在被释放时，对该对象的refcount并不是0，这意味着代码中存在危险的引用，这是一个潜在的UAF对象，此时堆管理器会将此危险的对象隔离，从而阻止了后续可能的漏洞利用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2022年6月，全新的安全机制MiraclePtr正式地在Windows和Android平台下的browser进程中启用；&lt;/li&gt;
&lt;li&gt;2022年9月，扩大启用范围，除renderer进程外的所有进程皆启用；&lt;/li&gt;
&lt;li&gt;2023年6月，MiraclePtr在全平台启用（ChromeOS, macOS, 和Linux）；&lt;/li&gt;
&lt;li&gt;2024年7月，Chrome VRP宣布：被MiraclePtr保护住的UAF漏洞将不再视为安全问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是什么给了Chrome安全团队如此底气，直接无视这一类严重的内存破坏问题？&lt;/p&gt;
&lt;p&gt;想回答这个问题，就不得不提到24年的一例MiraclePtr绕过。在24年的5月，Chrome发布的一则巨额漏洞奖金格外引人注目，其数额高达&lt;strong&gt;10万美元&lt;/strong&gt;，这正是Chrome VRP悬赏的MiraclePtr Bypass的赏金数字。&lt;/p&gt;
 &lt;img src=&#34;attachments/582cdd8b-4ae0-4ec9-94a8-c1e8dcac68b3.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 50%;&#34;/&gt;
&lt;p&gt;待issue完全公开后，大家才终于明白绕过的细节。PartitionAlloc中在进行refcount加一的操作后，代码中会检测refcount是否溢出，若发生溢出则会触发进程的主动崩溃。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CountType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetch_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kPtrInc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_order_relaxed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Check overflow.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PA_CHECK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kPtrCountMask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kPtrCountMask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安全研究员Micky发现，在发生溢出后，这个CHECK并不会立即崩溃，进程处理崩溃相关的逻辑还需要一定的时间，在程序实际停止运行前，仍存在约180ms的时间（在测试环境中），这就给了攻击者生死竞速的机会，攻击者若能在这段时间内完成堆喷占位和后续控制PC等操作，则可以成功利用被MiraclePtr保护的UAF漏洞。&lt;/p&gt;
&lt;p&gt;满足攻击成功需要诸多条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精准地溢出长度为29 bit的refcount字段。&lt;/li&gt;
&lt;li&gt;释放对象的代码与其他攻击所需的代码&lt;strong&gt;不&lt;/strong&gt;运行在同一线程，且都一定程度受攻击者控制。&lt;/li&gt;
&lt;li&gt;攻击者自由地控制目标对象的refcount。&lt;/li&gt;
&lt;li&gt;在极短的时间窗口内赢得race并完成利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综合了以上种种限制，这就使得这个绕过技术几乎只存在与理论中，但Chrome团队仍慷慨地奖励了这一发现。&lt;/p&gt;
&lt;p&gt;除此之外，DARKNAVY与24年11月也发现了MiraclePtr实现上的缺陷，报告给了Chrome团队并得到了确认。&lt;/p&gt;
 &lt;img src=&#34;attachments/2bafe2a9-c149-4d72-a351-83fbd00453ad.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;综合这一发现以及此前多个高质量漏洞报告，DARKNAVY位列Chrome VRP 2024年度top 20安全研究员/机构。&lt;/p&gt;
 &lt;img src=&#34;attachments/0d2e3c6e-9649-482c-9c68-0041ad24cc11.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;了解这般背景后，不难看出，历史上仅有的绕过方式存在诸多限制，且MiraclePtr缓解机制稳定运转了两年多，时间已经检验了它的有效性，相信Google是在深思熟虑后决定的&amp;quot;无视&amp;quot;大部分UAF漏洞。&lt;/p&gt;
&lt;p&gt;Google历经两年多的时间终于基本根除了一个心头大患，这对消费者来说是可喜可贺的。在Chrome的Q3季度总结中还提到了数个对Chrome内存安全的加固，如移除C语言库libpng的依赖，改为使用Rust实现的PNG、JSON等解码；再如将图形渲染模块ANGLE移植到渲染进程中以获得更强大的沙箱保护。这方方面面的努力，无不预示着未来的Chrome将更难以使用内存破坏漏洞突破。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;深蓝洞察&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从MiraclePtr的部署到绕过案例的出现，再到其机制的不断完善，Chrome展现的不仅是技术防御的进化，更是一种安全哲学：&lt;/p&gt;
&lt;p&gt;通过奖励机制激励发现潜在问题，通过技术迭代增强整体体系，而非仅关注单点漏洞。&lt;/p&gt;
&lt;p&gt;这种模式体现了Chrome团队对&amp;quot;攻防对抗&amp;quot;的深刻认知——安全从不是一劳永逸的结果，而是一场拉锯战。&lt;/p&gt;
&lt;p&gt;随着安全研究和技术手段的同步发展，Chrome的安全或许无法做到&amp;quot;绝对防御&amp;quot;，但却可以通过这种系统化的策略，将威胁持续降低至可接受的范围，赢取用户的信任，让安全成为产品的核心竞争力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024年度最别开生面的新生态</title>
      <link>https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/</link>
      <pubDate>Sat, 08 Feb 2025 17:10:13 +0800</pubDate>
      <guid>https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/attachments/edfb09e4-2e2e-4c4f-bcd4-60f71fa4a553.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://mp.weixin.qq.com/s/FTbvsoSwGnbPzdM1DCopoA&#34;&gt;《深蓝洞察 | 2023 年度安全报告》&lt;/a&gt;中，我们曾提到：&amp;ldquo;当我们站在下一个十年的悬崖边时，2023年注定将成为一个具有深刻转折意义的年份。新防御机制的落地和新型攻击技术的崛起，将深刻改变数字安全的格局。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;2024年，如一阵疾风而至，又如暴雨般迅速远去。我们在2023年中讨论的AI变革、移动操作系统的突破、供应链安全的挑战，已经在2024年&lt;strong&gt;继续上演&lt;/strong&gt;，几乎无法让人有片刻喘息。&lt;/p&gt;
&lt;p&gt;不断涌现的颠覆性变化，与传统安全市场如同冰窖般的低迷态势形成鲜明对比。在AI时代，&lt;strong&gt;传统的内存安全研究&lt;/strong&gt;是否仍具意义？&lt;strong&gt;新的攻击手段&lt;/strong&gt;又将走向何方？在不断变化的数字世界中，&lt;strong&gt;用户隐私的保障&lt;/strong&gt;又该如何应对？&lt;/p&gt;
&lt;p&gt;2024年的深蓝洞察，&lt;strong&gt;我们已经迎接未来的到来&lt;/strong&gt;，诚邀您一同探讨与分享。&lt;/p&gt;
&lt;p&gt;以下为本期《深蓝洞察 | 2024 年度安全报告》的第一篇。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/attachments/edccbbb3-c319-41dc-a2d8-aa0b007d7397.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;华&lt;/strong&gt;为于2019年发布了HarmonyOS 1.0版本，直到持续维护的HarmonyOS 4.2，虽然在应用框架层面上实现了对Android和鸿蒙的双重兼容，即所谓的&amp;quot;双框架&amp;quot;，但因为其操作系统底座仍基于Android内核，这一情况引发了业界广泛的质疑。&lt;/p&gt;
&lt;p&gt;自2024年HarmonyOS NEXT版本起，到现在发布的5.0版本，HarmonyOS应用框架层已更新为鸿蒙&amp;quot;单框架&amp;quot;，内核也已完全转向使用华为自研的HongMeng内核。正式告别了对Android应用框架、内核的依赖。&lt;/p&gt;
 &lt;img src=&#34;attachments/9ba4c168-3d16-4975-a015-ca4d4c799f74.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 60%;&#34;/&gt;
&lt;p&gt;早在6月2日，DARKNAVY就已经发布了在HarmonyOS NEXT Developer Preview2版本上完成的&lt;a href=&#34;https://mp.weixin.qq.com/s/QjXGDmnmvHyxWzoESsADLg&#34;&gt;全球第一个公开越狱视频&lt;/a&gt;，并在6月12号发布了该版本另一漏洞导致的&lt;a href=&#34;https://mp.weixin.qq.com/s/Uc21sBCfW3H3snxepNYQAw&#34;&gt;应用保活视频&lt;/a&gt;。依托获取的系统权限，我们对HarmonyOS NEXT从应用框架到内核都做了进一步的分析，研究发现无论是应用框架还是内核，HarmonyOS NEXT都与Android有着显著差异。下面我们从安全研究的角度出发，以&amp;quot;单框架&amp;quot;应用开发、权限管控、万物互联、内核架构以及系统调用几个维度为例将我们看到的真实的HarmonyOS NEXT操作系统揭示出来。&lt;/p&gt;
&lt;h2 id=&#34;鸿蒙单框架&#34;&gt;鸿蒙&amp;quot;单框架&amp;quot;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;鸿&lt;/strong&gt;蒙&amp;quot;单框架&amp;quot;意味着彻底与Android分手，系统不再支持APK安装包，也不再使用JAVA作为应用开发语言。&amp;ldquo;单框架&amp;quot;改用HAP安装包部署，应用开发语言采用eTS(extended TypeScript)。&lt;/p&gt;
&lt;p&gt;为了避免重蹈传统Android系统中恶意应用横行的覆辙，鸿蒙&amp;quot;单框架&amp;quot;着手于对原有不足的机制进行改进。例如其通过应用签名等机制限制了应用只允许从应用市场安装，杜绝任何第三方非正式应用；更为严格地限制了应用后台保活的手段，即任何后台应用10s后都会被强制挂起；采用了敏感权限单次授权，以保障授权最小化，如应用只允许获取用户单次选择的相关图片而无法直接获取所有图库图片。&lt;/p&gt;
&lt;p&gt;除了以上对原系统的优化外，鸿蒙&amp;quot;单框架&amp;quot;更有一些大刀阔斧的变革。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;万物互联&amp;quot;的底层基石是分布式软总线(DSoftBus)，它实现了不同型号、种类的设备之间的互联互通，底层传输介质支持了WiFi、蓝牙等，协议层面覆盖了发现、鉴权、传输等不同阶段。从用户的角度，系统新增的服务如分布式文件系统、剪切板同步极大地便捷了使用。对于开发者来说，底层甚至支持远程调用其他设备的IPC，实现了分布式binder调用。在如此强大的功能下，此模块的安全性更显得尤为重要。&lt;/li&gt;
&lt;/ul&gt;
 &lt;img src=&#34;attachments/1e9908a8-a059-4c00-9952-1e5b5f58ca1b.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 50%;&#34;/&gt;
&lt;ul&gt;
&lt;li&gt;新增的XPM(eXecutable Permission Manager)模块确保了强制代码保护机制，应用仅可加载含合法签名的代码。在应用安装之后，代码文件(.abc和.so)无法被随意修改，否则将会被拒绝执行。同时还存在代码完整性保护，阻止应用篡改可执行代码。&lt;/li&gt;
&lt;li&gt;AccessToken机制实现了更细颗粒度的权限控制，它首先将token type分成Hap、Native、Shell等几个类别，分离了系统程序和APP的权限管理；一个应用的access token中包含了应用 ID、子用户 ID、应用分身索引、应用APL、授权状态等信息，有助于系统实现更为细致的鉴权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这几项机制都从操作系统内核层面给予了支持，实现了从上到下的全流程控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得一提的是，鸿蒙&amp;quot;单框架&amp;quot;虽不支持APK安装包，但&amp;quot;出境易&amp;rdquo;、&amp;ldquo;卓易通&amp;quot;应用使得在该系统上运行Android APP变得可能。实际分析时由于内核及TEE的加密支持，反编译这些应用市场的安装包异常困难。DARKNAVY基于前期积累实现了应用解密，使用自研反编译器，发现这些应用通过调用鸿蒙系统的容器接口实现了Android的应用和框架层模拟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/attachments/041b449b-86a5-4f6f-86d6-95c83b881ba3.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;鸿蒙内核&#34;&gt;鸿蒙内核&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/zh/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/attachments/29d2ff55-0b0c-433e-ac26-ad678551f701.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;鸿蒙内核（以下统称为HongMeng内核）基于微内核架构设计，将传统内核的各项功能拆分为一个精简的核心内核和多个独立的系统组件，并根据安全需求将部分或全部系统组件置于用户态运行，相较于Linux Kernel采用的宏内核架构，提供了更强的安全性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在宏内核架构中，所有模块紧密耦合在一起。例如，如果攻击者利用网络模块中的漏洞成功攻破网络模块，便可直接控制整个宏内核。&lt;/li&gt;
&lt;li&gt;而在微内核架构下，即使某一模块（如网络模块）被攻破，由于各模块间的隔离机制，攻击者无法轻易将攻击扩展至其他系统模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
 &lt;img src=&#34;attachments/e76e86f9-bc1d-4df1-af9a-97622fb2e856.png&#34; style=&#34;display: block; margin-left: auto; margin-right: auto; zoom: 70%;&#34;/&gt;
&lt;p&gt;系统组件的隔离势必带来性能开销。对于组件间频繁上下文切换所带来的开销，HongMeng内核通过将文件系统管理(fsmgr)、内存管理(memmgr)、进程管理(procmgr)等频繁调用的功能移入内核态，并将网络通信、驱动(devhost)等存在较大攻击面的功能隔离于用户态，以牺牲较少量的性能换取了更高的安全性。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
