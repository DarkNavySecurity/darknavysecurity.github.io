<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DARKNAVY</title>
    <link>https://www.darknavy.org/</link>
    <description>Recent content on DARKNAVY</description>
    <image>
      <title>DARKNAVY</title>
      <url>https://www.darknavy.org/images/white_logo.png</url>
      <link>https://www.darknavy.org/images/white_logo.png</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Feb 2025 17:07:28 +0800</lastBuildDate>
    <atom:link href="https://www.darknavy.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Most Unfortunate Backdoor of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_most_unfortunate_backdoor_of_2024/</link>
      <pubDate>Thu, 13 Feb 2025 17:07:28 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_most_unfortunate_backdoor_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_unfortunate_backdoor_of_2024/attachments/474a4c83-4170-4512-bc3b-a8ec5de49be4.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does open source guarantee that there are no backdoors?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the 1983 Turing Award ceremony, Ken Thompson raised this question. As one of only three legends to win the Turing Award before the age of 40, he demonstrated how to hack Unix systems compiled from harmless source code by implanting backdoors in compilers, remaining a tale frequently cited by hackers to this day.&lt;/p&gt;
&lt;p&gt;In 2024, the XZ backdoor incident resurfaced this question. Under the nose of the open-source community, attackers successfully pushed the backdoored xz-utils 5.6.1 package into official repositories of several distributions like Debian and Fedora. Fortunately, engineer Andres Freund discovered and reported the abnormal behavior of xz-utils 5.6.1 in time. Although the community effectively stopped the backdoor&amp;rsquo;s spread, this heart-stopping crisis made every open-source user rethink the trust model in collaborative development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Most Prominent Privacy Security Trend of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_most_prominent_privacy_security_trend_of_2024/</link>
      <pubDate>Wed, 12 Feb 2025 16:40:12 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_most_prominent_privacy_security_trend_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_prominent_privacy_security_trend_of_2024/attachments/ea604b12-e368-4ff5-baea-2b56979e34e5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the beginning of 2025, the five-year &amp;ldquo;Siri Eavesdropping Scandal&amp;rdquo; finally came to an end. Apple settled a class-action lawsuit with the plaintiffs for $95 million.&lt;/p&gt;
&lt;p&gt;This well-known privacy case started when users accused Siri of accidentally capturing and recording their everyday conversations without permission, and leaking the data to third-party advertisers.&lt;/p&gt;
&lt;p&gt;Even though Apple firmly denied these claims, public concern over privacy security is growing day by day. &lt;strong&gt;Now, we share massive amounts of personal data with AI every day. Are these privacy data really secure enough?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Maddest Vulnerability of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_maddest_vulnerability_of_2024/</link>
      <pubDate>Tue, 11 Feb 2025 11:41:45 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_maddest_vulnerability_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_maddest_vulnerability_of_2024/attachments/8671fafe-16f3-46b2-bf66-846bf748cc02.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Under the collective efforts of security researchers and increasingly stringent security mitigations, most memory vulnerabilities have been nipped in the bud.&lt;/p&gt;
&lt;p&gt;Is it time to declare memory vulnerabilities a thing of the past?&lt;/p&gt;
&lt;p&gt;In July 2024, a &amp;ldquo;nuclear bomb&amp;rdquo; from the Windows camp shattered the illusion of security. We can&amp;rsquo;t help but ask: When faced with threats from memory, just how much can the walls in front of us really defend against?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Most Imaginative New Applications of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_most_imaginative_new_applications_of_2024/</link>
      <pubDate>Mon, 10 Feb 2025 11:25:50 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_most_imaginative_new_applications_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_imaginative_new_applications_of_2024/attachments/0127cf48-39e2-4864-bafc-4b2ce7a7cef1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2023 was the dawn of generative AI and large language models, which output content in unprecedented ways.&lt;/p&gt;
&lt;p&gt;In 2024, a large number of AI agents emerged, expanding the capabilities of LLM, driving more widespread tool usage, and extending their application to more fields.&lt;/p&gt;
&lt;p&gt;For security researchers, how to leverage AI to improve work efficiency, and even drive AI to think, analyze, and find vulnerabilities like humans, has become a key topic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Most &#34;Golden&#34; Bypass of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_most_golden_bypass_of_2024/</link>
      <pubDate>Sun, 09 Feb 2025 17:13:30 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_most_golden_bypass_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_golden_bypass_of_2024/attachments/cover.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since the early 2000s, attacks based on browser vulnerabilities have remained a mainstream, effective, and versatile attack method. The following is the second article from the &amp;ldquo;DARKNAVY INSIGHT | 2024 Annual Security Report&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_golden_bypass_of_2024/attachments/2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;According to the latest report from market research firm Statcounter, Chrome has unquestionably secured its position as the most dominant browser in terms of market share.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_golden_bypass_of_2024/attachments/085f2c36-5c81-4182-b887-93394febe001.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Chrome is renowned for its exceptional security, with the Google security team continuously researching and implementing cutting-edge vulnerability mitigation mechanisms. One of the most well-known among them is MiraclePtr, designed to prevent attackers from exploiting Use-After-Free (UAF) vulnerabilities in the browser.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Most Groundbreaking New Security Ecosystem of 2024</title>
      <link>https://www.darknavy.org/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/</link>
      <pubDate>Sat, 08 Feb 2025 17:10:13 +0800</pubDate>
      <guid>https://www.darknavy.org/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.darknavy.org/darknavy_insight/the_most_groundbreaking_new_security_ecosystem_of_2024/attachments/f349496e-e1f5-4d6b-b4a2-7c939b50aa80.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;DARKNAVY INSIGHT | 2023 Annual Security Report&amp;rdquo;, we noted: &amp;ldquo;As we stand on the precipice of the next decade, 2023 will undoubtedly be a year of profound transformation. The deployment of new defense mechanisms and the rise of novel attack technologies will fundamentally reshape the digital security landscape.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The year 2024 arrived like a swift gust of wind, only to fade away like a brief storm. The AI revolution, breakthroughs in mobile operating systems, and challenges in supply chain security that we discussed in 2023 continue to unfold in 2024, leaving little room to catch our breath.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2024-5274: A Minor Flaw in V8 Parser Leading to Catastrophes</title>
      <link>https://www.darknavy.org/blog/cve_2024_5274_a_minor_flaw_in_v8_parser_leading_to_catastrophes/</link>
      <pubDate>Fri, 30 Aug 2024 10:09:29 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/cve_2024_5274_a_minor_flaw_in_v8_parser_leading_to_catastrophes/</guid>
      <description>&lt;p&gt;In May of this year, we noticed that Chrome fixed a V8 vulnerability that was being exploited in the wild in &lt;a href=&#34;https://chromereleases.googleblog.com/2024/05/stable-channel-update-for-desktop_23.html&#34;&gt;this update&lt;/a&gt;. We quickly pinpointed the fix for this vulnerability and discovered that it was a rare bug in the Parser module, which piqued our interest greatly. This led to the following research.&lt;/p&gt;
&lt;h2 id=&#34;from-patch-to-poc&#34;&gt;From Patch to PoC&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at the &lt;a href=&#34;https://chromium-review.googlesource.com/c/v8/v8/&amp;#43;/5553030&#34;&gt;patch&lt;/a&gt; for this vulnerability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;diff --git a/src/ast/scopes.cc b/src/ast/scopes.cc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;index 660fdd2e9ad..de4df35c0ad 100644
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;--- a/src/ast/scopes.cc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/src/ast/scopes.cc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;@@ -2447,7 +2447,7 @@ bool Scope::MustAllocate(Variable* var) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;     var-&amp;gt;set_is_used();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     if (inner_scope_calls_eval_ &amp;amp;&amp;amp; !var-&amp;gt;is_this()) var-&amp;gt;SetMaybeAssigned();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;-  DCHECK(!var-&amp;gt;has_forced_context_allocation() || var-&amp;gt;is_used());
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+  CHECK(!var-&amp;gt;has_forced_context_allocation() || var-&amp;gt;is_used());
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;   // Global variables do not need to be allocated.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return !var-&amp;gt;IsGlobalObjectProperty() &amp;amp;&amp;amp; var-&amp;gt;is_used();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;diff --git a/src/parsing/parser-base.h b/src/parsing/parser-base.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;index 40914d39a4f..65c338f343f 100644
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;--- a/src/parsing/parser-base.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/src/parsing/parser-base.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;@@ -2661,6 +2661,7 @@ typename ParserBase&amp;lt;Impl&amp;gt;::BlockT ParserBase&amp;lt;Impl&amp;gt;::ParseClassStaticBlock(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   FunctionState initializer_state(&amp;amp;function_state_, &amp;amp;scope_, initializer_scope);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+  FunctionParsingScope body_parsing_scope(impl());
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;   AcceptINScope accept_in(this, true);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   // Each static block has its own var and lexical scope, so make a new var
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The patch is very simple, the actual effective fix is just one line of code. This line introduces a variable of type &lt;code&gt;FunctionParsingScope&lt;/code&gt; when parsing the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks&#34;&gt;static initialization block&lt;/a&gt; of a class. Let&amp;rsquo;s examine what this newly introduced variable does:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploiting Steam: Usual and Unusual Ways in the CEF Framework</title>
      <link>https://www.darknavy.org/blog/exploiting_steam_usual_and_unusual_ways_in_the_cef_framework/</link>
      <pubDate>Thu, 27 Jun 2024 11:39:32 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/exploiting_steam_usual_and_unusual_ways_in_the_cef_framework/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Chromium Embedded Framework (CEF) is an open-source framework that allows developers to embed the Chromium engine in their applications. Although CEF is widely employed in a range of popular software, including WeChat and the Epic Games Launcher, there has been little security research on it. In this article, we will use the Steam Client Browser (a CEF-based application) as an example to present the vulnerabilities we found and how we exploited them to build three Remote Code Execution (RCE) chains.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AVSS Report: System Security Adversarial Capability Preliminary Evaluation of iOS, Android, and HarmonyOS - Kernel</title>
      <link>https://www.darknavy.org/blog/avss_report_kernel/</link>
      <pubDate>Tue, 11 Jun 2024 15:40:57 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/avss_report_kernel/</guid>
      <description>&lt;p&gt;As consumers, when faced with five different brands and models of smartphones or ten different smart cars, it&amp;rsquo;s difficult for us to determine which one can effectively prevent our privacy from being stolen or maliciously accessed, such as our location or even hearing our conversations inside the car.&lt;/p&gt;
&lt;p&gt;Even as ordinary consumers, we currently have no way of knowing. As technology professionals who have long studied in APT(Advanced Persistent Threat) attacks, we understand that these devices can ultimately be compromised in the face of advanced persistent attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strengthening the Shield: MTE in Heap Allocators</title>
      <link>https://www.darknavy.org/blog/strengthening_the_shield_mte_in_memory_allocators/</link>
      <pubDate>Wed, 03 Jan 2024 16:19:13 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/strengthening_the_shield_mte_in_memory_allocators/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In 2018, with the release of ARMv8.5-A, a brand new chip security feature &lt;a href=&#34;https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/Arm_Memory_Tagging_Extension_Whitepaper.pdf&#34;&gt;MTE&lt;/a&gt; (Memory Tagging Extensions) emerged. Five years later, in 2023, the first smartphone to support this feature was released — &lt;a href=&#34;https://blog.google/products/pixel/google-pixel-8-pro/&#34;&gt;Google Pixel 8&lt;/a&gt; — marking the official entry of MTE into the consumer market. Although this feature is not yet enabled by default, developers can &lt;a href=&#34;https://googleprojectzero.blogspot.com/2023/11/first-handset-with-mte-on-market.html&#34;&gt;turn it on&lt;/a&gt; themselves for testing.&lt;/p&gt;
&lt;p&gt;As a powerful defense against memory corruption, there has not yet been a comprehensive analysis of MTE&amp;rsquo;s defensive boundaries, capabilities, and its impact on performance on the internet. Previously, Google Project Zero published a series of &lt;a href=&#34;https://googleprojectzero.blogspot.com/2023/08/mte-as-implemented-part-1.html&#34;&gt;articles about MTE&lt;/a&gt;, focusing on the more low-level security aspects of MTE. However, the actual impact of MTE on real software security remains a mystery. To discuss this topic, heap allocators provide an excellent starting point. Heap memory corruption issues have gradually become the mainstream type of binary vulnerabilities. For reference, see the &lt;a href=&#34;https://github.com/microsoft/MSRC-Security-Research/blob/master/presentations/2019_09_CppCon/CppCon2019%20-%20Killing%20Uninitialized%20Memory.pdf&#34;&gt;presentation&lt;/a&gt; by MSRC at CppCon 2019:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploiting the libwebp Vulnerability, Part 2: Diving into Chrome Blink</title>
      <link>https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/</link>
      <pubDate>Fri, 03 Nov 2023 14:10:17 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When we examine a third-party library vulnerability in a real environment, we often encounter numerous complex variables that exist within the vulnerability&amp;rsquo;s context. Exploiting such a vulnerability is not as easy as one might imagine.&lt;/p&gt;
&lt;p&gt;Here is the information we know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overflowed variable &lt;a href=&#34;https://source.chromium.org/chromium/chromium/src/&amp;#43;/d53886d694334f194b267db3af165e5cd61ef489:third_party/libwebp/src/src/dec/vp8l_dec.c;l=437&#34;&gt;huffman_tables&lt;/a&gt;, has a size of 0x2f28.&lt;/li&gt;
&lt;li&gt;The heap chunk is allocated in the renderer&amp;rsquo;s ThreadPool, while most objects are allocated in the main thread.&lt;/li&gt;
&lt;li&gt;We can write a partially controlled 4-byte integer with an offset that is a multiple of 8 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Chrome, different-sized heap chunks are stored in separate buckets, isolating objects of different sizes to ensure &lt;strong&gt;security&lt;/strong&gt;. Typically, achieving heap exploitation in Chrome requires identifying objects of the same size for layout purposes and then utilizing Use-After-Free (UAF) or Out-of-Bounds (OOB) techniques to manipulate other objects, leading to information disclosure or control-flow hijacking. In the following, we will share the objects we have discovered, as well as attempting to bypass this mechanism.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploiting the libwebp Vulnerability, Part 1: Playing with Huffman Code</title>
      <link>https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/</link>
      <pubDate>Fri, 03 Nov 2023 14:10:12 +0800</pubDate>
      <guid>https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/</guid>
      <description>&lt;h2 id=&#34;vulnerability-localization&#34;&gt;Vulnerability Localization&lt;/h2&gt;
&lt;p&gt;In the initial phase of vulnerability analysis, due to the absence of readily available PoCs or detailed analysis reports, we first attempted to read and understand the &lt;a href=&#34;https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a&#34;&gt;patch code&lt;/a&gt; for CVE-2023-4863 in the upstream repository of webmproject/libwebp. However, the WebM Project&amp;rsquo;s official patch was relatively complex, making it difficult for us to accurately pinpoint the root cause of the vulnerability.&lt;/p&gt;
&lt;p&gt;Thus, we turned our attention to Apple&amp;rsquo;s official patch for CVE-2023-41064, and performed a comparison of the ImageIO framework before and after the update using BinDiff. We noticed that Apple&amp;rsquo;s patch involved fewer code changes and was much easier to understand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://www.darknavy.org/about/</link>
      <pubDate>Thu, 02 Nov 2023 17:11:58 +0800</pubDate>
      <guid>https://www.darknavy.org/about/</guid>
      <description>&lt;p&gt;We are DARKNAVY, an independent and free-spirited security research team and service provider. We have established AVSS (Adversarial Vulnerability Scoring System) to evaluate vulnerabilities and the effectiveness of system mitigation mechanisms in real adversarial environments.&lt;/p&gt;
&lt;p&gt;Over the past 20 years, we have been at the forefront of cybersecurity research and application, winning multiple world championships. We have also established GEEKCON, a unique and top-class security geek competition, and responsibly disclosed over 1000 severe vulnerabilities. With relentless efforts, we have helped over 100 companies worldwide address security issues, contributing to the growth of the cybersecurity industry.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
